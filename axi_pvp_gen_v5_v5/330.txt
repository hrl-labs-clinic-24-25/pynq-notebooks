class AxiPvpGen(SocIp):
    
    # PVP Gen Control Registers
    
    # START_VAL_0_REG : 20 bit
    # START_VAL_1_REG : 20 bit
    # START_VAL_2_REG : 20 bit
    # START_VAL_3_REG : 20 bit
    
    # TRIGGER_PVP_REG: 1 bit
    
    # DWELL_CYCLES_REG : 16 bit
    # CYCLES_TILL_READOUT : 16 bit
    # STEP_SIZE_REG : 20 bit
    # PVP_WIDTH_REG : 10 bit
    # NUM_DIMS_REG : 3 bits
    
    # DEMUX_0_REG : 6 bit (dac that changes value every cycle) (demuxing)
    # DEMUX_1_REG : 6 bit (dac that changes value every depth^1 cycles)
    # DEMUX_2_REG : 6 bit (dac that changes value every depth^2 cycles)
    # DEMUX_3_REG : 6 bit (dac that changes value every depth^3 cycles)
    
    ## READ_ONLY REGISTER
    # mosi_o : 32 bit
    # select_mux_o: 5 bits
    # readout_o : 1 bit
	# trigger_spi_o: 1 bit
    # done   : 1 bit
    
    
    bindto = ['user.org:user:axi_pvp_gen_v5:3.0']
    
    def __init__(self, description, **kwargs):
        super().__init__(description)
        
        #map register names to offsets
        self.REGISTERS = {
            'START_VAL_0_REG':0, 
            'START_VAL_1_REG':1,
            'START_VAL_2_REG':2,
            'START_VAL_3_REG':3,
            
            'TRIGGER_PVP_REG':4,
            'CONFIG_REG':5,
            
            'DWELL_CYCLES_REG':6,
            'CYCLES_TILL_READOUT':7,
            
            'STEP_SIZE_REG':8,
            'PVP_WIDTH_REG':9,
            'NUM_DIMS_REG':10,
            
            'DEMUX_0_REG':11, 
            'DEMUX_1_REG':12,
            'DEMUX_2_REG':13,
            'DEMUX_3_REG':14
        }
        
        #default register values
        self.START_VAL_0_REG = 0
        self.START_VAL_1_REG = 0
        self.START_VAL_2_REG = 0
        self.START_VAL_3_REG = 0
        
        self.TRIGGER_PVP_REG = 0
        self.CONFIG_REG = 0
        
        self.DWELL_CYCLES_REG = 38400 # at board speed of 384 MHz, 38400 dwell cycles is 100 us
        self.CYCLES_TILL_READOUT = 10
        
        self.STEP_SIZE_REG = 1
        self.PVP_WIDTH_REG = 256
        self.NUM_DIMS_REG = 0 # set to 0 for manual control?
        
        self.DEMUX_0_REG = -1 # if we haven't chosen which demux dac number to be dac_w, then we don't want to accidentally change a random dac by leaving this memory unset
        self.DEMUX_1_REG = -1
        self.DEMUX_2_REG = -1
        self.DEMUX_3_REG = -1
        # mosi is read only so we don't give it a default here
        
    def check_lock(self, registerName = "<name of locked register>"):
        if (self.TRIGGER_PVP_REG == 1):
            raise RuntimeError (registerName + " cannot be changed while pvp plot is running.")
    
    def set_start(self, axis = '', start_val = 0b00):
        '''method to set start val 
            (note that we want a method for this because we don't want to worry about registers outside this class)'''
        
        self.check_lock("Start values")
        
        if (axis == '0'):
            self.START_VAL_0_REG = start_val
        elif (axis == '1'):
            self.START_VAL_1_REG = start_val
        elif (axis == '2'):
            self.START_VAL_2_REG = start_val
        elif (axis == '3'):
            self.START_VAL_3_REG = start_val
        else:
            raise ValueError("No valid axis was specified. Valid axis arguments are '0', '1', '2', '3'")
    
    def start_pvp(self):
        self.TRIGGER_PVP_REG = 1
        
    def end_pvp(self):
        self.TRIGGER_PVP_REG = 0
            
    def set_dwell_cycles(self, dwell_cycles = 38400):
        self.check_lock("Dwell cycles")
        self.DWELL_CYCLES_REG = dwell_cycles
        
    def set_readout_cycles(self, cycles_till = 400):
        '''sets readout cycles'''
        self.check_lock("Readout cycles")
        self.CYCLES_TILL_READOUT = cycles_till
    
    def set_step_size(self, step_size = 0):
        '''sets size of step (in Volts??)'''
        self.check_lock("step size")
        self.STEP_SIZE_REG = step_size
        
    def set_pvp_width(self, pvp_width = 256): #this default value is so if someone accidentally runs the method without a argument, the new value is just the default reset value
        '''sets the width in pixels of a pvp'''
        self.check_lock("Pvp width")
        self.PVP_WIDTH_REG = pvp_width
        
    def set_num_dims(self, num_dims = 0):
        '''sets the number of dacs looped through in the pvp plot'''
        self.check_lock("Number of dimensions")
        self.NUM_DIMS_REG = num_dims
        
    def set_demux(self, axis = '', demux = -1): 
        self.check_lock("Demux values")
        
        init_DAC(demux)
        
        #note to self: do we specify demux value or ask for board num and dac num?
        if (demux >= 0 and demux < 32):
            if (axis == '0'):
                self.DEMUX_0_REG = demux
            elif (axis == '1'):
                self.DEMUX_1_REG = demux
            elif (axis == '2'):
                self.DEMUX_2_REG = demux
            elif (axis == '3'):
                self.DEMUX_3_REG = demux
            else:
                raise ValueError("No valid axis was specified. Valid axis arguments are '0', '1', '2', '3'")
        else:
            raise ValueError("Demux value must be in the range 0-31 inclusive")
            
    def report_settings(self):
        print("Start of DAC 0: ", hex(self.START_VAL_0_REG))
        print("Start of DAC 1: ", hex(self.START_VAL_1_REG))
        print("Start of DAC 2: ", hex(self.START_VAL_2_REG))
        print("Start of DAC 3: ", hex(self.START_VAL_3_REG))
        print("Trigger Value: ", hex(self.TRIGGER_PVP_REG))
        print("Arbitrary 24 bits of SPI: ", hex(self.CONFIG_REG))
        print("Number of Dwell Cycles: ", hex(self.DWELL_CYCLES_REG))
        print("Cycles till Trigger AWGs: ", hex(self.CYCLES_TILL_READOUT))
        print("Step Size: ", hex(self.STEP_SIZE_REG))
        print("Size of PVP plot (square): ", hex(self.PVP_WIDTH_REG))
        print("Number of DACs Running: ", hex(self.NUM_DIMS_REG))
        print("DEMUX 0: ", hex(self.DEMUX_0_REG))
        print("DEMUX 1: ", hex(self.DEMUX_1_REG))
        print("DEMUX 2: ", hex(self.DEMUX_2_REG))
        print("DEMUX 3: ", hex(self.DEMUX_3_REG))
        
            
    def set_2D_pvp_parameters(self, start1, start2, demux1, demux2):
        self.check_lock("2D pvp parameters")
        self.set_start("0", start1)
        self.set_start("1", start2)
        self.set_demux("0", demux1)
        self.set_demux("1", demux2)
        
    def send_arbitrary_SPI(self, demux_int = 0b00000, reg = 0b0000, data_int = 0x00000):
        '''Lets the user specify an arbitrary dac (demux_int) and send it an arbitrary 24 bit message (data_int)
           Raises the done flag when finished and cannot be run again until pvp trigger reg is cleared'''
        
        self.check_lock("Arbitrary spi")
        
        demux_shift = demux_int << 24
        reg_shift = reg << 20
        out = demux_shift + reg_shift + data_int
        print("Writing config reg to " + str(bin(out)))
        self.CONFIG_REG = out
        time.sleep(0.1)
        self.CONFIG_REG = 0


    START_VAL_0_REG = volt2reg(1.0) #0b0000_0000_0000_1111_0000
START_VAL_1_REG = volt2reg(0.3) # 0b0000_0000_1111_0000_0000
START_VAL_2_REG = 0b1000_1111_0000_0000_0000
START_VAL_3_REG = 0b1111_0000_0000_0000_0000
soc.axi_pvp_gen_v5_0.set_start(axis = '0', start_val = START_VAL_0_REG)
soc.axi_pvp_gen_v5_0.set_start(axis = '1', start_val = START_VAL_1_REG)
soc.axi_pvp_gen_v5_0.set_start(axis = '2', start_val = START_VAL_2_REG)
soc.axi_pvp_gen_v5_0.set_start(axis = '3', start_val = START_VAL_3_REG)

STEP_SIZE_REG = volt2reg(0.5)
soc.axi_pvp_gen_v5_0.set_step_size(STEP_SIZE_REG)

NUM_DIMS_REG = 2
soc.axi_pvp_gen_v5_0.set_num_dims(NUM_DIMS_REG)

PVP_WIDTH_REG = 4
soc.axi_pvp_gen_v5_0.set_pvp_width(PVP_WIDTH_REG)

DWELL_CYCLES_REG = 38400
soc.axi_pvp_gen_v5_0.set_dwell_cycles(DWELL_CYCLES_REG)

CYCLES_TILL_READOUT_REG = 200
soc.axi_pvp_gen_v5_0.set_readout_cycles(CYCLES_TILL_READOUT_REG)


soc.axi_pvp_gen_v5_0.set_demux("0", 0b000001)
soc.axi_pvp_gen_v5_0.set_demux("1", 0b000010)
soc.axi_pvp_gen_v5_0.set_demux("2", 0b000110)
soc.axi_pvp_gen_v5_0.set_demux("3", 0b001100)

''''''

def init_DAC(demux = 0):
    soc.axi_pvp_gen_v5_0.send_arbitrary_SPI(demux_int = demux, reg = 0b0010, data_int = 0b0000_0000_0000_0011_0010)
    
def volt2reg(volt = 0.0):
    VREFN = 0.0
    VREFP = 5.0
    bit_res = 20

    if volt < VREFN:
        print("%s: %d V out of range." % (self.__class__.__name__, volt))
        return -1
    elif volt > VREFP:
        print("%s: %d V out of range." % (self.__class__.__name__, volt))
        return -1
    else:
        Df = (2**bit_res - 1)*(volt - VREFN)/(VREFP - VREFN)
        print("Df is " + str(bin(int(Df))))
        return int(Df)

def set_DAC(demux = 0, volts = 0.0):
    val = volt2reg(volts)
    #5 bits of demux, 4 bits of reg, 20 bits of data
    soc.axi_pvp_gen_v5_0.send_arbitrary_SPI(demux, 0b0001, val)

# LOOK AT ME!!!!!
# run this cell to config and set a DAC 
# this is the shorter (preferred) way to do the above two cells
curr_dac = 1
init_DAC(curr_dac)
set_DAC(curr_dac, 3.11)